apiVersion: apps/v1
kind: Deployment
metadata:
  name: jivas
  labels:
    {{- include "jivas.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jivas
  template:
    metadata:
      labels:
        app: jivas
        {{- include "jivas.selectorLabels" . | nindent 8 }}
    spec:
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: wait-for-mongo-primary
          image: mongo
          command:
            - sh
            - -c
            - |
              echo "[wait-for-mongo-primary] Waiting for healthy PRIMARY to be available..."
              until mongosh --host mongodb-0.mongodb-headless.{{ .Release.Namespace }}.svc.cluster.local \
                            --eval 'rs.status().members.find(m => m.state === 1 && m.health === 1)' \
                            --quiet | grep -v null > /dev/null 2>&1; do
                echo "[wait-for-mongo-primary] No healthy PRIMARY found. Retrying in 5 seconds..."
                sleep 5
              done
              echo "[wait-for-mongo-primary] Healthy PRIMARY is ready!"
      containers:
        - name: jivas
          image: "{{ .Values.image.repository }}:{{ tpl .Values.image.tag . }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 8501
              name: jvclient
            - containerPort: 8990
              name: jvmanager
            - containerPort: 8989
              name: jvstudio
            - containerPort: 9000
              name: jvfileserve
          resources:
            {{- toYaml .Values.jivas.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: {{ .Values.jivas.probes.liveness.path }}
              port: {{ .Values.jivas.probes.liveness.port }}
            initialDelaySeconds: {{ .Values.jivas.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.jivas.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.jivas.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.jivas.probes.liveness.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.jivas.probes.readiness.path }}
              port: {{ .Values.jivas.probes.readiness.port }}
            initialDelaySeconds: {{ .Values.jivas.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.jivas.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.jivas.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.jivas.probes.readiness.failureThreshold }}
          env:
            - name: DATABASE_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: DATABASE_HOST
            - name: DATABASE_NAME
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: DATABASE_NAME
            - name: JIVAS_ACTIONS_ROOT_PATH
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_ACTIONS_ROOT_PATH
            - name: JIVAS_DESCRIPTOR_ROOT_PATH
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_DESCRIPTOR_ROOT_PATH
            - name: JIVAS_USER
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_USER
            - name: JIVAS_BASE_URL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_BASE_URL
            - name: JIVAS_STUDIO_URL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_STUDIO_URL
            - name: JIVAS_FILES_URL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_FILES_URL
            - name: JIVAS_FILES_SHORT_URL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_FILES_SHORT_URL
            - name: JIVAS_FILES_ROOT_PATH
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_FILES_ROOT_PATH
            - name: JIVAS_ENVIRONMENT
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_ENVIRONMENT
            - name: JIVAS_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_HOST
            - name: JIVAS_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_PORT
            - name: JIVAS_FILE_INTERFACE
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_FILE_INTERFACE
            {{- if eq .Values.jivas.config.fileInterface "s3" }}
            - name: JIVAS_S3_BUCKET_NAME
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_S3_BUCKET_NAME
            - name: JIVAS_S3_REGION_NAME
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_S3_REGION_NAME
            - name: JIVAS_S3_ACCESS_KEY_ID
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_S3_ACCESS_KEY_ID
            - name: JIVAS_S3_SECRET_ACCESS_KEY
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: JIVAS_S3_SECRET_ACCESS_KEY
            {{- end }}
            - name: JIVAS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jivas-secrets
                  key: JIVAS_PASSWORD
            - name: JIVAS_WEBHOOK_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: jivas-secrets
                  key: JIVAS_WEBHOOK_SECRET_KEY
            - name: TOKEN_SECRET
              valueFrom:
                secretKeyRef:
                  name: jivas-secrets
                  key: JIVAS_TOKEN_SECRET
            - name: REDIS_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: REDIS_HOST
            - name: REDIS_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: REDIS_PORT
            - name: REDIS_USER
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: REDIS_USER
            - name: REDIS_PASS
              valueFrom:
                secretKeyRef:
                  name: redis-secrets
                  key: REDIS_PASSWORD
            {{- if .Values.optionalServices.typesense.enabled }}
            - name: TYPESENSE_HOST
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: TYPESENSE_HOST
            - name: TYPESENSE_PORT
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: TYPESENSE_PORT
            - name: TYPESENSE_PROTOCOL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: TYPESENSE_PROTOCOL
            - name: TYPESENSE_API_KEY
              valueFrom:
                secretKeyRef:
                  name: typesense-secrets
                  key: TYPESENSE_API_KEY
            - name: TYPESENSE_CONNECTION_TIMEOUT_SECONDS
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: TYPESENSE_CONNECTION_TIMEOUT_SECONDS
            {{- end }}
            {{- if .Values.optionalServices.wppconnect.enabled }}
            - name: WPP_API_URL
              valueFrom:
                configMapKeyRef:
                  name: jivas-config
                  key: WPP_API_URL
            - name: WPP_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: wppconnect-secrets
                  key: SECRET_KEY
            {{- end }}
          volumeMounts:
            - name: jivas-shared-actions
              mountPath: /app/actions
      volumes:
        - name: jivas-shared-actions
          persistentVolumeClaim:
            claimName: jivas-shared-pvc
